# For OptiPack installer:
- If exists *.jar in /mods mkdir ArchivedMods1(2,3,4..âˆž) and move *.jar to ArchivedMods* (Yes, i love cmd, how did you guessed?)
- Add cheats to the folder
- Make all download sources files

# For ModPackSwitcher
- You can save modpacks with any name you want
- Modpacks Archiver (Better to archive than move to folder lol)
- Save/Load modpacks
- Autoupdate ig

# For OpenModpackEngine downloader/manager:
- Go back to OME main executable after post-init.bat
- Modpack "repo's". (Like, you select option for adding repo and it will clone its module from modpack dev git(hub/lab) to download it so you can have one manager for many modpacks)
- Exporting (and Importing) all downloaded/added repo's
- Much more customizability and for modpack makers editor for adding mod links
- Verifier if all mods from modpack are from safe source (like curseforge <-curseforge has anti bot bruh)
- Auto updater
- Support for forge, rift and quilt modpacks
- Modpack info viewer
- Modloader with correct version checker (If exists and if true if supported by modpack version, If exists false:)
- Auto Modloader downloader
- Ability to include texture packs (and auto apply them? idk if this is even possible)
- Support for cross drive minecraft path's (not really that hard, may be harder to add when its on other drive than program, i maybe can use tmp folder to pass all the files lol)
- Support for more types of extensions for download sources (*.csv etc.)
- Recomended modpacks (first i need to make this shit useable and somehow popular, nah, i can make my own modpacks XD(or just add existing ones to my program))
- Steam release (Trollage)
- Installing custom/unofficial modloaders/minecraft version (maybe someone likes fabric without any vanilla mob lmao)
- Backuper (Backups most important .minecraft files into program /src/backups/ folder (user will be asked when installing modpack that uses custom mc or texture pack))

# Little documentation for how repo's/modules would work
In modpack page (github etc.) dev can include "modpackname.OMEmodule" (<- renamed .txt/.bat lol) with command to download and extract modpack with additional info to a "modules" folder
in /src folder, if OME is executed you can choose option to load modules menu in which you can load .OMEmodule or browse your modules and script would fetch all modpacks and output them for user to select
when user selects modpack you will get things like ASCII art for modpack, info about modpack creator, who made OME modpack and options what to do with current modpack
like "Install", "Delete", "More info" (like github link for modpack) and custom options that anyone with some batch knowlage could add. Also if special command
gets executed you will download Modpack editor script that will help you make your own modpack without any knowlage of batch, just user input and dragging
files. Generated modpack will need to be uploaded to github and in modpack creator you will need to paste github link to generate .OEMmodule file.
This could take me over month to do but i will do it so yeah xD 

# Hell of ideas
- *Rewrite in python (with GUI)*
  > As likely as me getting an A on a math test lmao

- *Rewrite in C++ (with/out GUI)*
  > Even less likely to make because im c++ noob lol